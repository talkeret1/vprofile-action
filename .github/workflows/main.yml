name: vprofile actions
on: workflow_dispatch # Starting the Workflow Manually from Github Actions.
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eksx

jobs:
    Testing-Code:
        runs-on: ubuntu-latest
        steps:
            - name: Code Checkout
              uses: actions/checkout@v4
            
            - name: Maven Test
              run: mvn test

            - name: Checkstyle
              run: mvn checkstyle:checkstyle

            # Setup Java 11 to be Default (Sonar-Scanner Requirments as of 5.x)

            - name: Install Java 11
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin' # See 'Support Distributions' for Available
                java-version: '11'

            # Setup Sonar-Scanner

            - name: Install SonarQube
              uses: warchant/setup-sonar-scanner@v7

            # Run Sonar-Scanner

            - name: SonarQube Scan
              run: sonar-scanner
                 -Dsonar.host.url=${{ secrets.SONAR_URL }}
                 -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                 -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                 -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                 -Dsonar.sources=src/
                 -Dsonar.junit.reportsPath=target/surefire-reports/
                 -Dsonar.jacoco.reportsPath=target/jacoco.exec
                 -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                 -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

            # Check the Quality Gate Status

            # - name: SonarQube Quality Gate Check
            #   id: sonarqube-quality-gate-check
            #   uses: sonarsource/sonarqube-quality-gate-action@master
            #   # Force to Fail Steps After Specific Time
            #   timeout-minutes: 5
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}   # Optional
            
    Build_And_Publish:
      needs: Testing-Code   # Start after "Testing-Code" Job is Finised.
      runs-on: ubuntu-latest
      steps:
          - name: Code Checkout
            uses: actions/checkout@v4

          - name: Build & Upload Image to ECR
            uses: appleboy/docker-ecr-action@master
            with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REPOSITORY }}
                region: ${{ env.AWS_REGION }}
                tags: latest, ${{ github.run_number }}  #  It will Get the Build ID from Github
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./
                
    DeployToEKS:
      needs: Build_And_Publish   # Start after "Build_And_Publish" Job is Finised.
      runs-on: ubuntu-latest
      steps:
        - name: Code Checkout
          uses: actions/checkout@v4
        
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
            aws-region: ${{ env.AWS_REGION }}

        - name: Get Kube Config File
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}  # Generating A Kube Config File
          
        - name: Print Kube Config File
          run: cat ~/.kube/config

        - name: Login to ECR
          run: kubectl create secret docker-registry regcreden --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
        
        - name: Deploy Helm
          uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            cluster-name: ${{ env.EKS_CLUSTER }}
            #config-files: .github/values/dev.yaml
            chart-path: helm/vprofilecharts
            #namespace: default
            values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}, apptag=${{ github.run_number }}  # Fetch the ECR Image
            name: vprofile-stack